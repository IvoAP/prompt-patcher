import argparse
from datetime import datetime
from os import makedirs

MODELS = ['gemini-flash-2.5', 'deepseek-V3.1']
PROMPT_TECHNIQUES = ['zero-shot', 'cognitive-verifier', 'role-prompting', 'chain-of-thought']

def parse_arguments():
    '''
    Parse and validate command line arguments.
    '''
    parser = argparse.ArgumentParser(description = 'Patch correction generation comparison between different prompt engineering techniques.')

    parser.add_argument('model', choices=MODELS, help='LLM model responsible for patch generation.')
    parser.add_argument('technique', choices = PROMPT_TECHNIQUES, help='Prompt engineering technique used in correction patch generation.')
    parser.add_argument('vulnerability', help='Vulnerability to be treated by the generated correction patch.')

    return parser.parse_args()


def save_results(model: str, technique: str, vulnerability: str, patch_content: str, prompts: list[str], elapsed_time: float) -> None:
    '''
    Save the generated patch and the details of its creation to disk.

    Args:
        model: LLM model used for patch generation.
        technique: Prompt engineering technique fed to the LLM model.
        vulnerability: Vulnerability being patched.
        patch_content: Correction patch generated by the responsible LLM.
        prompts: List of prompts used (e.g, {'initial': '...', 'follow_up': '...'})
        elapsed_time: TIme taken to generate the correction patch.
    '''

    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S_%f')
    base_path = f'scripts/{model}/{technique}/{vulnerability}/{timestamp}'

    print(f'Creating directory: {base_path}...')

    try:
        makedirs(base_path)

        patch_file = base_path + '/patch.sh'
        details_file = base_path + '/details.txt'

        print(f'Writing patch to: {patch_file}')
        with open(patch_file, 'w') as f:
            f.write(patch_content)
        
        print(f'Writing details to: {details_file}')
        with open(details_file, 'w') as f:
            f.write('=== PATCH GENERATION DETAILS ===\n')
            f.write(f'Model: {model}\n')
            f.write(f'Technique: {technique}\n')
            f.write(f'Vulnerability: {vulnerability}\n')
            f.write(f'Time elapsed: {elapsed_time:.4f} seconds\n')
            f.write('=====================\n')

            f.write('Prompts used:\n')
            for i, prompt in enumerate(prompts):
                f.write(f'Prompt {i+1}:\n')
                f.write(f'{prompt}\n')
                f.write('----------\n')
        print(f'Correction patch and its details stored successfully at: {base_path}')

    except FileExistsError:
        print(f'Directory {base_path} already exists.')
    except Exception as e:
        print(f'An error has occured: {e}')
